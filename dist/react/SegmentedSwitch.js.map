{"version":3,"file":"SegmentedSwitch.js","sources":["../../src/react/SegmentedSwitch.js"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\nimport { Icon } from './index'\nimport { iconMap } from './iconMap'\n\nconst allIconNames = Object.keys(iconMap) || []\n\nconst sampleOptions = [\n    { label: 'Option A', value: 'option-a', icon: 'heart' },\n    { label: 'Option B', value: 'option-b', icon: 'circle' },\n    { label: 'Option C', value: 'option-c', icon: 'star' },\n]\nexport default function SegmentedSwitch(props) {\n    \n    const {\n        size = 'medium',\n        value: externalValue,\n        width = 'auto',\n        bgColor = 'base-100',\n        selectedOptionColor = 'base-0',\n        options: externalOptions,\n        onChange,\n        hasOutline = false,\n        attributes,\n        listeners\n      } = props;\n\n\n    const [internalOptions, setInternalOptions] = useState(externalOptions || sampleOptions);\n    const [selectedOption, setSelectedOption] = useState(externalValue || internalOptions[0].value);\n    const isControlled = externalOptions !== undefined && onChange !== undefined;\n    const options = isControlled ? externalOptions : internalOptions;\n\n    useEffect(() => {\n        if (externalOptions) {\n            setInternalOptions(externalOptions);\n        }\n    }\n    , [externalOptions]);\n\n    useEffect(() => {\n        if (externalValue) {\n            setSelectedOption(externalValue);\n        }\n    }\n    , [externalValue]);\n\n    /* Wrapper */ \n    const widthStyle = `w-${width}`\n    const gapStyles = size == 'small' ? 'gap-0.5' : size == 'large' ? 'gap-1.5' : 'gap-1'\n    const sizeStyles = size == 'small' ? `gap-0.5 text-xs p-0.5` : size == 'large' ? `gap-1.5 text-base p-1` : `gap-1 text-sm p-0.5`;\n    const cornerStyles = size == \"small\" ? \"rounded\" : size == \"large\" ? \"rounded-lg\" : \"rounded-md\"\n    const bgStyles = bgColor != 'none' ? `bg-${bgColor} text-${bgColor}-content` : ''\n    const borderStyles = hasOutline ? 'ring-1 ring-inset ring-base-200' : ''\n    let wrapperClasses = `flex flex-row items-center justify-between font-medium whitespace-nowrap ${widthStyle} ${gapStyles} select-none\n    ${bgStyles} ${borderStyles} ${sizeStyles} ${cornerStyles}`\n    \n    const textColor = bgColor.startsWith('base-') ? 'text-base-content' : `text-${bgColor}-content`\n\n    /* Options */ \n    const optionSizeStyles = size == 'small' ? `py-0.5 px-2 rounded-sm` : size == 'large' ? `py-2 px-3 rounded-md` : `py-1.5 px-2.5 rounded`;\n    const optionClasses = `cursor-pointer  flex flex-row flex-grow items-center justify-center text-center ${optionSizeStyles} ${textColor} ${gapStyles}`\n    const selectedTextColor = selectedOptionColor.startsWith('success') || selectedOptionColor.startsWith('info') ? `text-${selectedOptionColor.replace('-content', '')}` : `text-${selectedOptionColor}-content`\n    const selectedOptionClasses = `bg-${selectedOptionColor} ring-1 ring-base-200  ${selectedTextColor}`\n    \n    \n    function handleSelect(value) {\n        if (isControlled && onChange) {\n            onChange(value);\n        } else {\n            setSelectedOption(value);\n        }\n    }\n\n    \n    return (\n        <div\n        {...attributes} {...listeners} \n            className={wrapperClasses}\n        >\n        \n                {options\n                .slice(0, 5) // up to 5 options\n                .map((option, index) => (\n                    <div className={`${optionClasses} ${option.value == selectedOption ? selectedOptionClasses : ''}`}\n                    style={{minWidth: `auto`}}\n                    key={index}\nonClick={() => handleSelect(option.value)}\n                    >\n                        {option.icon && <Icon icon={option.icon} className='scale-75' />}\n                        <span className='text-center' >\n                            {option.label}\n                        </span>\n                    </div>\n                ))}\n        \n        \n    </div>\n);  \n}\n\nSegmentedSwitch.propTypes = {\n    width: PropTypes.oneOf(['auto', '1/2', 'full']),\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\n    bgColor: PropTypes.oneOf(['base-0', 'base-50', 'base-100', 'base-200', 'base-300']),\n    selectedOptionColor: PropTypes.oneOf(['base-0', 'accent', 'primary', 'success-content', 'info-content']),\n    defaultOption: PropTypes.number,\n    options: PropTypes.arrayOf(PropTypes.shape({\n        label: PropTypes.string,\n        value: PropTypes.string,\n        icon: PropTypes.string,\n    })),\n    hasOutline: PropTypes.bool,\n};\n\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,MAAM,gBAAgB;AACtB,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,OAAA,EAAS;AAC3D,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,QAAA,EAAU;AAC5D,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,MAAA,EAAQ;AAC1D,EAAA;AACe,SAAS,eAAe,CAAC,KAAK,EAAE;AAC/C;AACA,IAAI,MAAM;AACV,QAAQ,IAAA,GAAO,QAAQ;AACvB,QAAQ,KAAK,EAAE,aAAa;AAC5B,QAAQ,KAAA,GAAQ,MAAM;AACtB,QAAQ,OAAA,GAAU,UAAU;AAC5B,QAAQ,mBAAA,GAAsB,QAAQ;AACtC,QAAQ,OAAO,EAAE,eAAe;AAChC,QAAQ,QAAQ;AAChB,QAAQ,UAAA,GAAa,KAAK;AAC1B,QAAQ,UAAU;AAClB,QAAQ,SAAA;AACR,OAAM,GAAI,KAAK,CAAA;AACf;AACA;AACA,IAAI,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAA,GAAI,QAAQ,CAAC,eAAA,IAAmB,aAAa,CAAC,CAAA;AAC5F,IAAI,MAAM,CAAC,cAAc,EAAE,iBAAiB,IAAI,QAAQ,CAAC,aAAA,IAAiB,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;AACnG,IAAI,MAAM,eAAe,eAAA,KAAoB,SAAU,IAAG,QAAS,KAAI,SAAS,CAAA;AAChF,IAAI,MAAM,OAAQ,GAAE,eAAe,eAAA,GAAkB,eAAe,CAAA;AACpE;AACA,IAAI,SAAS,CAAC,MAAM;AACpB,QAAQ,IAAI,eAAe,EAAE;AAC7B,YAAY,kBAAkB,CAAC,eAAe,CAAC,CAAA;AAC/C,SAAQ;AACR,KAAI;AACJ,MAAM,CAAC,eAAe,CAAC,CAAC,CAAA;AACxB;AACA,IAAI,SAAS,CAAC,MAAM;AACpB,QAAQ,IAAI,aAAa,EAAE;AAC3B,YAAY,iBAAiB,CAAC,aAAa,CAAC,CAAA;AAC5C,SAAQ;AACR,KAAI;AACJ,MAAM,CAAC,aAAa,CAAC,CAAC,CAAA;AACtB;AACA;AACA,IAAI,MAAM,UAAW,GAAE,CAAC,EAAE,EAAE,KAAK,CAAC,EAAA;AAClC,IAAA,MAAA,SAAA,GAAA,IAAA,IAAA,OAAA,GAAA,SAAA,GAAA,IAAA,IAAA,OAAA,GAAA,SAAA,GAAA,QAAA;AACA,IAAA,MAAA,UAAA,GAAA,IAAA,IAAA,OAAA,GAAA,CAAA,qBAAA,CAAA,GAAA,IAAA,IAAA,OAAA,GAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,mBAAA,CAAA,CAAA;AACA,IAAA,MAAA,YAAA,GAAA,IAAA,IAAA,OAAA,GAAA,SAAA,GAAA,IAAA,IAAA,OAAA,GAAA,YAAA,GAAA,aAAA;AACA,IAAA,MAAA,QAAA,GAAA,OAAA,IAAA,MAAA,GAAA,CAAA,GAAA,EAAA,OAAA,CAAA,MAAA,EAAA,OAAA,CAAA,QAAA,CAAA,GAAA,GAAA;AACA,IAAA,MAAA,YAAA,GAAA,UAAA,GAAA,iCAAA,GAAA,GAAA;AACA,IAAA,IAAA,cAAA,GAAA,CAAA,yEAAA,EAAA,UAAA,CAAA,CAAA,EAAA,SAAA,CAAA;AACA,IAAA,EAAA,QAAA,CAAA,CAAA,EAAA,YAAA,CAAA,CAAA,EAAA,UAAA,CAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA;AACA,IAAA,MAAA,SAAA,GAAA,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,mBAAA,GAAA,CAAA,KAAA,EAAA,OAAA,CAAA,QAAA,EAAA;AACA;AACA;AACA,IAAA,MAAA,gBAAA,GAAA,IAAA,IAAA,OAAA,GAAA,CAAA,sBAAA,CAAA,GAAA,IAAA,IAAA,OAAA,GAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,qBAAA,CAAA,CAAA;AACA,IAAA,MAAA,aAAA,GAAA,CAAA,gFAAA,EAAA,gBAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA;AACA,IAAA,MAAA,iBAAA,GAAA,mBAAA,CAAA,UAAA,CAAA,SAAA,CAAA,IAAA,mBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,KAAA,EAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,EAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,KAAA,EAAA,mBAAA,CAAA,QAAA,EAAA;AACA,IAAA,MAAA,qBAAA,GAAA,CAAA,GAAA,EAAA,mBAAA,CAAA,uBAAA,EAAA,iBAAA,CAAA,EAAA;AACA;AACA;AACA,IAAA,SAAA,YAAA,CAAA,KAAA,EAAA;AACA,QAAA,IAAA,YAAA,IAAA,QAAA,EAAA;AACA,YAAA,QAAA,CAAA,KAAA,CAAA,CAAA;AACA,SAAA,MAAA;AACA,YAAA,iBAAA,CAAA,KAAA,CAAA,CAAA;AACA,SAAA;AACA,KAAA;AACA;AACA;AACA,IAAA;AACA,QAAA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACA,QAAA,GAAA,UAAA,EAAA,GAAA,SAAA;AACA,YAAA,SAAA,EAAA,cAAA,EAAA;AACA;AACA;AACA,kBAAA,OAAA;AACA,iBAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,iBAAA,GAAA,CAAA,CAAA,MAAA,EAAA,KAAA;AACA,oBAAA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,CAAA,EAAA,aAAA,CAAA,CAAA,EAAA,MAAA,CAAA,KAAA,IAAA,cAAA,GAAA,qBAAA,GAAA,EAAA,CAAA,CAAA;AACA,oBAAA,KAAA,EAAA,CAAA,QAAA,EAAA,CAAA,IAAA,CAAA,CAAA;AACA,oBAAA,GAAA,EAAA,KAAA;AACA,OAAA,EAAA,MAAA,YAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA;AACA;AACA,0BAAA,MAAA,CAAA,IAAA,IAAA,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,MAAA,CAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,EAAA;AACA,0BAAA,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,EAAA,SAAA,EAAA,aAAA,EAAA;AACA,8BAAA,MAAA,CAAA,KAAA;AACA,yBAAA;AACA,qBAAA;AACA,iBAAA,CAAA;AACA;AACA;AACA,KAAA;AACA,EAAA;AACA,CAAA;AACA;AACA,eAAA,CAAA,SAAA,GAAA;AACA,IAAA,KAAA,EAAA,SAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAAA;AACA,IAAA,IAAA,EAAA,SAAA,CAAA,KAAA,CAAA,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,CAAA,CAAA;AACA,IAAA,OAAA,EAAA,SAAA,CAAA,KAAA,CAAA,CAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,CAAA,CAAA;AACA,IAAA,mBAAA,EAAA,SAAA,CAAA,KAAA,CAAA,CAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,cAAA,CAAA,CAAA;AACA,IAAA,aAAA,EAAA,SAAA,CAAA,MAAA;AACA,IAAA,OAAA,EAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,KAAA,CAAA;AACA,QAAA,KAAA,EAAA,SAAA,CAAA,MAAA;AACA,QAAA,KAAA,EAAA,SAAA,CAAA,MAAA;AACA,QAAA,IAAA,EAAA,SAAA,CAAA,MAAA;AACA,KAAA,CAAA,CAAA;AACA,IAAA,UAAA,EAAA,SAAA,CAAA,IAAA;AACA,CAAA;;;;"}