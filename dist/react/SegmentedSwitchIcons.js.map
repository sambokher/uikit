{"version":3,"file":"SegmentedSwitchIcons.js","sources":["../../src/react/SegmentedSwitchIcons.js"],"sourcesContent":["import PropTypes from 'prop-types'\nimport { Icon } from './index'\nimport { iconMap } from './iconMap'\nimport React, { useState } from 'react';\n\nexport default function SegmentedSwitchIcons(props) {\n    \n    const {\n        size = 'medium',\n        defaultOption = 0,\n        width = 'auto',\n        bgColor = 'base-200',\n        options = ['heart', 'star', 'check'],\n        selectedOptionColor = 'base-0',\n        hasOutline = true,\n        attributes,\n        listeners\n      } = props;\n\n    const [selectedOption, setSelectedOption] = useState(defaultOption)\n    function handleSelect(index) {\n        setSelectedOption(index)\n    }\n\n    const widthStyle = `w-${width}`\n    const sizeStyles = size == 'small' ? `text-xs` : size == 'large' ? `text-base` : `text-sm`;\n    const cornerStyles = size == \"small\" ? \"rounded\" : size == \"large\" ? \"rounded-lg\" : \"rounded-md\"\n    const textColor = bgColor.startsWith('base-') ? 'text-base-content' : `text-${bgColor}-content`\n\n    const bgStyles = bgColor != 'none' ? `bg-${bgColor} text-${bgColor}-content` : ''\n    const borderStyles = hasOutline ? 'border border-base-300' : 'border border-transparent';\n    const classes = `flex flex-row items-center justify-between font-medium whitespace-nowrap flex-shrink-0 relative\n    ${bgStyles} ${borderStyles} ${sizeStyles} ${cornerStyles}`\n    \n    \n    const optionSizeStyles = size == 'small' ? `p-0.5 border-2 rounded` : size == 'large' ? `p-1.5 border-2 rounded-lg` : `p-0.5 border-2 rounded-md`;\n    const optionClasses = `flex flex-row items-center justify-center text-center cursor-pointer border-${bgColor} ${optionSizeStyles} ${textColor}`\n    \n    const selectedTextColor = \n        selectedOptionColor.startsWith('success') || selectedOptionColor.startsWith('info') ? `text-${selectedOptionColor.replace('-content', '')}`\n        : `text-${selectedOptionColor}-content`\n\n    const selectedOptionClasses = `cursor-pointer text-center bg-${selectedOptionColor} border-${bgColor} ${selectedTextColor} ${optionSizeStyles}`\n\n    const gapStyles = size == 'small' ? 'gap-0.5' : size == 'large' ? 'gap-1.5' : 'gap-1'\n    let wrapperClasses = `flex flex-col ${widthStyle} ${gapStyles} select-none`\n\n    return (\n        <div\n        {...attributes} {...listeners} \n            className={wrapperClasses}\n        >\n        <div className={classes}>\n        {options.map((icon, index) => {\n            const IconComponent = <Icon icon={icon} className='flex-shrink-0 mx-auto scale-75' />\n            return (\n                <div \n                    className={selectedOption == index ? selectedOptionClasses : optionClasses}\n                    style={{\n                        width: `${100 / options?.length}%`,\n                        whiteSpace: 'nowrap',\n                        textOverflow: 'ellipsis',\n                        overflow: 'hidden', \n                    }}\n                    key={index}\nonClick={()=> handleSelect(index)}\n                >\n                    {IconComponent}\n                </div>\n            );})}\n        </div>\n    </div>\n);  \n}\n\n\n\nSegmentedSwitchIcons.propTypes = {\n    width: PropTypes.oneOf(['auto', '1/2', 'full']),\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\n    bgColor: PropTypes.oneOf(['base-0', 'base-50', 'base-100', 'base-200', 'base-300']),\n    selectedOptionColor: PropTypes.oneOf(['base-0', 'accent', 'primary', 'success-content', 'info-content']),\n    defaultOption: PropTypes.number,\n    options: PropTypes.arrayOf(PropTypes.string),\n    hasOutline: PropTypes.bool,\n};\n\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,cAAA,CAAA,GAAA,EAAA,EAAA,IAAA,aAAA,GAAA,SAAA,CAAA,CAAA,IAAA,KAAA,GAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,MAAA,EAAA,EAAA,MAAA,EAAA,GAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,GAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,KAAA,gBAAA,IAAA,EAAA,KAAA,cAAA,KAAA,KAAA,IAAA,IAAA,EAAA,EAAA,OAAA,SAAA,CAAA,EAAA,CAAA,IAAA,EAAA,KAAA,QAAA,IAAA,EAAA,KAAA,gBAAA,EAAA,EAAA,aAAA,GAAA,KAAA,CAAA,CAAA,KAAA,GAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,IAAA,EAAA,KAAA,MAAA,IAAA,EAAA,KAAA,cAAA,EAAA,EAAA,KAAA,GAAA,EAAA,CAAA,CAAA,GAAA,IAAA,KAAA,KAAA,CAAA,IAAA,CAAA,aAAA,EAAA,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,aAAA,GAAA,SAAA,CAAA,EAAA,EAAA,CAAA,OAAA,KAAA,CAAA,EAIA;AACe,SAAS,oBAAoB,CAAC,KAAK,EAAE;AACpD;AACA,IAAI,MAAM;AACV,QAAQ,IAAA,GAAO,QAAQ;AACvB,QAAQ,aAAA,GAAgB,CAAC;AACzB,QAAQ,KAAA,GAAQ,MAAM;AACtB,QAAQ,OAAA,GAAU,UAAU;AAC5B,QAAQ,OAAA,GAAU,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;AAC5C,QAAQ,mBAAA,GAAsB,QAAQ;AACtC,QAAQ,UAAA,GAAa,IAAI;AACzB,QAAQ,UAAU;AAClB,QAAQ,SAAA;AACR,OAAM,GAAI,KAAK,CAAA;AACf;AACA,IAAI,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAE,GAAE,QAAQ,CAAC,aAAa,EAAA;AACtE,IAAI,SAAS,YAAY,CAAC,KAAK,EAAE;AACjC,QAAQ,iBAAiB,CAAC,KAAK,EAAA;AAC/B,KAAI;AACJ;AACA,IAAI,MAAM,UAAW,GAAE,CAAC,EAAE,EAAE,KAAK,CAAC,EAAA;AAClC,IAAA,MAAA,UAAA,GAAA,IAAA,IAAA,OAAA,GAAA,CAAA,OAAA,CAAA,GAAA,IAAA,IAAA,OAAA,GAAA,CAAA,SAAA,CAAA,GAAA,CAAA,OAAA,CAAA,CAAA;AACA,IAAA,MAAA,YAAA,GAAA,IAAA,IAAA,OAAA,GAAA,SAAA,GAAA,IAAA,IAAA,OAAA,GAAA,YAAA,GAAA,aAAA;AACA,IAAA,MAAA,SAAA,GAAA,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,mBAAA,GAAA,CAAA,KAAA,EAAA,OAAA,CAAA,QAAA,EAAA;AACA;AACA,IAAA,MAAA,QAAA,GAAA,OAAA,IAAA,MAAA,GAAA,CAAA,GAAA,EAAA,OAAA,CAAA,MAAA,EAAA,OAAA,CAAA,QAAA,CAAA,GAAA,GAAA;AACA,IAAA,MAAA,YAAA,GAAA,UAAA,GAAA,wBAAA,GAAA,2BAAA,CAAA;AACA,IAAA,MAAA,OAAA,GAAA,CAAA;AACA,IAAA,EAAA,QAAA,CAAA,CAAA,EAAA,YAAA,CAAA,CAAA,EAAA,UAAA,CAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA;AACA;AACA,IAAA,MAAA,gBAAA,GAAA,IAAA,IAAA,OAAA,GAAA,CAAA,sBAAA,CAAA,GAAA,IAAA,IAAA,OAAA,GAAA,CAAA,yBAAA,CAAA,GAAA,CAAA,yBAAA,CAAA,CAAA;AACA,IAAA,MAAA,aAAA,GAAA,CAAA,4EAAA,EAAA,OAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA;AACA;AACA,IAAA,MAAA,iBAAA;AACA,QAAA,mBAAA,CAAA,UAAA,CAAA,SAAA,CAAA,IAAA,mBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,KAAA,EAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AACA,UAAA,CAAA,KAAA,EAAA,mBAAA,CAAA,QAAA,EAAA;AACA;AACA,IAAA,MAAA,qBAAA,GAAA,CAAA,8BAAA,EAAA,mBAAA,CAAA,QAAA,EAAA,OAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,EAAA;AACA;AACA,IAAA,MAAA,SAAA,GAAA,IAAA,IAAA,OAAA,GAAA,SAAA,GAAA,IAAA,IAAA,OAAA,GAAA,SAAA,GAAA,QAAA;AACA,IAAA,IAAA,cAAA,GAAA,CAAA,cAAA,EAAA,UAAA,CAAA,CAAA,EAAA,SAAA,CAAA,YAAA,EAAA;AACA;AACA,IAAA;AACA,QAAA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACA,QAAA,GAAA,UAAA,EAAA,GAAA,SAAA;AACA,YAAA,SAAA,EAAA,cAAA,EAAA;AACA;AACA,UAAA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,OAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,KAAA,KAAA;AACA,YAAA,MAAA,aAAA,GAAA,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,gCAAA,IAAA,GAAA;AACA,YAAA;AACA,gBAAA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACA,oBAAA,SAAA,EAAA,cAAA,IAAA,KAAA,GAAA,qBAAA,GAAA,aAAA;AACA,oBAAA,KAAA,EAAA;AACA,wBAAA,KAAA,EAAA,CAAA,EAAA,GAAA,GAAA,cAAA,CAAA,CAAA,OAAA,EAAA,gBAAA,EAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,wBAAA,UAAA,EAAA,QAAA;AACA,wBAAA,YAAA,EAAA,UAAA;AACA,wBAAA,QAAA,EAAA,QAAA;AACA,qBAAA;AACA,oBAAA,GAAA,EAAA,KAAA;AACA,OAAA,EAAA,KAAA,YAAA,CAAA,KAAA,CAAA,EAAA;AACA;AACA,sBAAA,aAAA;AACA,iBAAA;AACA,cAAA,CAAA,CAAA;AACA,SAAA;AACA,KAAA;AACA,EAAA;AACA,CAAA;AACA;AACA;AACA;AACA,oBAAA,CAAA,SAAA,GAAA;AACA,IAAA,KAAA,EAAA,SAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAAA;AACA,IAAA,IAAA,EAAA,SAAA,CAAA,KAAA,CAAA,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,CAAA,CAAA;AACA,IAAA,OAAA,EAAA,SAAA,CAAA,KAAA,CAAA,CAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,CAAA,CAAA;AACA,IAAA,mBAAA,EAAA,SAAA,CAAA,KAAA,CAAA,CAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,cAAA,CAAA,CAAA;AACA,IAAA,aAAA,EAAA,SAAA,CAAA,MAAA;AACA,IAAA,OAAA,EAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA;AACA,IAAA,UAAA,EAAA,SAAA,CAAA,IAAA;AACA,CAAA;;;;"}