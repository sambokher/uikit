{"version":3,"file":"TextArea.js","sources":["../../src/react/TextArea.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Icon } from './index'\nimport { iconMap } from './iconMap'\n\nconst allIconNames = Object.keys(iconMap) || []\n\nexport default function TextArea(props) {\n    \n    const {\n        state = 'default',\n        bgColor = 'base-0',\n        size = 'medium',\n        maxRows = 5,\n        defaultRows = 3,\n        placeholder = 'placeholder text',\n        label = 'Label',\n        helperText = '',\n        value = '',\n        maxCharacters = 200,\n        onChange = () => {},\n        prefix = '',\n        hasCharacterCount = true,\n        textAlign = 'left',\n        width = 'auto',\n        rightIcon = 'none',\n        hasOutline = true,\n        defaultIconSet,\n        attributes,\n        listeners\n      } = props;\n    \n    const textAreaRef = useRef(null);\n    const [isFocused, setIsFocused] = useState(false);\n\n\n    const sizeStyles = size == 'small' ? `py-0.5 px-2 gap-1.5 text-xs` : size == 'large' ? `py-2 px-3 gap-3 text-base` : `py-1.5 px-2 gap-3 text-sm`;\n    const cornerStyles = size == \"small\" ? \"rounded\" : size == \"large\" ? \"rounded-lg\" : \"rounded-md\"\n    \n\n    let stateStyles = '';\n    switch (state) {\n        case 'default':\n            stateStyles = hasOutline ? isFocused ? `border border-accent` : `border border-base-300` : 'border border-transparent'\n            break;\n        case 'disabled':\n            stateStyles = `bg-base-100 opacity-70 cursor-not-allowed ${hasOutline ? 'border border-base-300' : ''}`\n            break;\n        case 'error':\n            stateStyles = `text-warning-content ${hasOutline ? 'border border-warning-content' : ''}`\n            break;\n        case 'success':\n            stateStyles = `${hasOutline ? 'border border-success-content' : ''}`\n            break;\n    }\n\n    \n    \n    const bgStyles = (bgColor && bgColor !== 'none') ? `bg-${bgColor}` : '';\n    let classes = `w-full flex items-center justify-between truncate ellipsis box-border font-medium ${sizeStyles} ${cornerStyles} ${bgStyles} ${stateStyles}`\n    \n    const labelTextSize = size == 'small' ? `text-sm` :  size == 'large' ? `text-lg`: `text-md`;\n    const labelClasses = `text-base-content ${labelTextSize} font-medium`\n    \n    const messageTextColor = state == 'error' ? stateStyles = 'text-warning-content' : state == 'success' ? stateStyles = 'text-success-content' : ''\n    const messageClasses = `text-sm font-sm ${messageTextColor}`\n    const widthStyle = width != 'auto' ? `w-${width}` : size == 'small' ? 'min-w-[120px]' : size == 'large' ? 'min-w-[200px]' : 'min-w-[160px]'\n\n    let wrapperClasses = `flex flex-col gap-1 ${widthStyle}`\n\n    const RightIconComponent = rightIcon !== 'none' ? <Icon icon={rightIcon?.toLowerCase()} defaultIconSet={defaultIconSet} className='flex-shrink-0 flex-grow-0 -mr-1 self-start'/> : null;\n\n    // Code to auto-resize the textarea\n    const lineHeight = size == 'small' ? 1 : size == 'large' ? 1.5 : 1.25\n    const textAreaStyles = {\n        lineHeight,\n        height: 'auto',\n        minHeight: Math.min(defaultRows, maxRows) * lineHeight + 'em',\n        maxHeight: maxRows * lineHeight + 'em',\n        overflow: 'auto'\n    }\n    \n    const adjustTextAreaHeight = (lineHeight, maxRows) => {\n        const textAreaElement = textAreaRef.current;\n        if (!textAreaElement) return;\n        textAreaElement.style.height = 'auto';\n        const newHeight = textAreaElement.scrollHeight;\n        const maxHeight = lineHeight * maxRows * 16; // Assuming lineHeight is in rem\n        textAreaElement.style.height = `${Math.min(newHeight, maxHeight)}px`;\n    };\n\n    useEffect(() => {\n        adjustTextAreaHeight(parseFloat(textAreaStyles.lineHeight), maxRows);\n        // Optional: If the value is part of the state and could change externally,\n        // you might want to observe changes and adjust the height accordingly.\n    }, [maxRows, value]); // Add other dependencies as necessary\n\n    // Code to count characters\n    const countCharacters = (text) => { return text.length || 0 }\n    const [ charCount, setCharCount ] = useState(countCharacters(value.length));\n\n    function handleChange(e) {\n        adjustTextAreaHeight(parseFloat(textAreaStyles.lineHeight), maxRows);\n        setCharCount(countCharacters(e.target.value)); \n        onChange(e.target.value);\n    }\n    \n\n    return (\n        <div\n        {...attributes} {...listeners} \n            className={wrapperClasses}\n        >\n            {label && <label className={labelClasses}>\n{label}\n                </label>}\n            <div style={{boxSizing: 'border-box'}} className={classes}>\n            {prefix}\n            \n            <textarea\n            type='text'\n            ref={textAreaRef}\n            onFocus={() => setIsFocused(true)}\n            onBlur={() => setIsFocused(false)}\n            disabled={state == 'disabled'}\n            className={`flex-grow text-${textAlign} border-transparent focus:outline-none focus:ring-0 font-medium resize-none placeholder:font-normal\n            placeholder-base-500 text-base-content bg-transparent w-full ${state == 'disabled' && 'cursor-not-allowed'}`}\n            value={value}\n            style={textAreaStyles}\n            placeholder={placeholder}\n            onChange={e => handleChange(e)}\n            />  \n            {RightIconComponent}\n            </div>\n            {(helperText || hasCharacterCount) &&\n            <div className={`flex flex-row gap-2 items-start justify-between w-full ${messageClasses}`}>\n            <span>\n{helperText}\n            </span>\n            <span className={`opacity-70 flex-shrink-0 text-xs ${charCount > maxCharacters ? 'text-warning' : '' }`}>{charCount}/{maxCharacters}</span>\n            </div>\n            }            \n        </div>\n        \n    );\n}\n\nTextArea.propTypes = {\n    width: PropTypes.oneOf([\"auto\", \"1/2\", \"full\"]),\n    textAlign: PropTypes.oneOf(['left', 'center', 'right']),\n    defaultRows: PropTypes.number,\n    maxRows: PropTypes.number,\n    state: PropTypes.oneOf(['default', 'disabled', 'error', 'success']),\n    bgColor: PropTypes.oneOf(['none', 'base-0', 'base-50', 'base-100']),\n    label: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string.isRequired,\n    helperText: PropTypes.string,\n    hasCharacterCount: PropTypes.bool,\n    prefix: PropTypes.string,\n    rightIcon: PropTypes.oneOf(['none', ...allIconNames]),\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\n    maxCharacters: PropTypes.number,\n    hasOutline: PropTypes.bool,\n};\n\n"],"names":[],"mappings":"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"}